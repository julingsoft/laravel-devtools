<?php

declare(strict_types=1);

namespace App\Modules\{{ groupName }}\Controllers;

use App\Bundles\{{ groupName }}\Services\{{ name }}BundleService;
use App\Entities\{{ groupName }}\{{ name }}Entity;
use App\Http\Controllers\Controller;
use App\Modules\{{ groupName }}\Requests\{{ name }}\{{ name }}QueryRequest;
use App\Modules\{{ groupName }}\Requests\{{ name }}\{{ name }}UpsertRequest;
use App\Modules\{{ groupName }}\Responses\{{ name }}\{{ name }}DestroyResponse;
use App\Modules\{{ groupName }}\Responses\{{ name }}\{{ name }}QueryResponse;
use App\Modules\{{ groupName }}\Responses\{{ name }}\{{ name }}Response;
use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Juling\Foundation\Enums\BusinessEnum;
use Juling\Foundation\Exceptions\BusinessException;
use OpenApi\Attributes as OA;
use Throwable;

class {{ name }}Controller extends Controller
{
    #[OA\Get(path: '/{{ camelName }}', summary: '显示列表页面', security: [['bearerAuth' => []]], tags: ['{{ comment }}'])]
    #[OA\Response(response: 200, description: 'OK')]
    public function index(Request $request): Renderable
    {
        return $this->display('{{ camelName }}.index');
    }

    #[OA\Get(path: '/{{ camelName }}/create', summary: '显示新增页面', security: [['bearerAuth' => []]], tags: ['{{ comment }}'])]
    #[OA\Response(response: 200, description: 'OK')]
    public function create(Request $request): Renderable
    {
        return $this->display('{{ camelName }}.create');
    }

    #[OA\Get(path: '/{{ camelName }}/edit', summary: '显示编辑页面', security: [['bearerAuth' => []]], tags: ['{{ comment }}'])]
    #[OA\Response(response: 200, description: 'OK')]
    public function edit(Request $request): Renderable
    {
        return $this->display('{{ camelName }}.edit');
    }

    #[OA\Post(path: '/{{ camelName }}/query', summary: '查询列表接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}'])]
    #[OA\Parameter(name: 'page', description: '当前页码', in: 'query', required: true, example: 1)]
    #[OA\Parameter(name: 'pageSize', description: '每页分页数', in: 'query', required: false, example: 10)]
    #[OA\RequestBody(required: true, content: new OA\JsonContent(ref: {{ name }}QueryRequest::class))]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ name }}QueryResponse::class))]
    public function query({{ name }}QueryRequest $queryRequest): JsonResponse
    {
        $page = intval($queryRequest->query('page', 1));
        $pageSize = intval($queryRequest->query('pageSize', 10));
        $request = $queryRequest->validated();

        try {
            $condition = [];

            ${{ camelName }}BundleService = new {{ name }}BundleService;
            $result = ${{ camelName }}BundleService->page($condition, $page, $pageSize);

            foreach ($result['data'] as $key => $item) {
                $response = new {{ name }}Response($item);
                $result['data'][$key] = $response->toArray();
            }

            return $this->success($result);
        } catch (Throwable $e) {
            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::QUERY_ERROR);
        }
    }

    #[OA\Post(path: '/{{ camelName }}/store', summary: '新增接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}'])]
    #[OA\RequestBody(required: true, content: new OA\JsonContent(ref: {{ name }}UpsertRequest::class))]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ name }}Response::class))]
    public function store({{ name }}UpsertRequest $createRequest): JsonResponse
    {
        $request = $createRequest->validated();

        DB::beginTransaction();
        try {
            $input = new {{ name }}Entity($request);

            ${{ camelName }}BundleService = new {{ name }}BundleService;
            if (${{ camelName }}BundleService->save($input->toArray())) {
                DB::commit();

                return $this->success();
            }

            throw new BusinessException(BusinessEnum::CREATE_FAIL);
        } catch (Throwable $e) {
            DB::rollBack();

            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::CREATE_ERROR);
        }
    }

    #[OA\Get(path: '/{{ camelName }}/show', summary: '获取详情接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}'])]
    #[OA\Parameter(name: 'id', description: 'ID', in: 'query', required: true, example: 1)]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ name }}Response::class))]
    public function show(Request $request): JsonResponse
    {
        $id = intval($request->query('id', 0));

        try {
            ${{ camelName }}BundleService = new {{ name }}BundleService;
            ${{ camelName }} = ${{ camelName }}BundleService->getOneById($id);
            if (empty(${{ camelName }})) {
                throw new BusinessException(BusinessEnum::NOT_FOUND);
            }

            $response = new {{ name }}Response(${{ camelName }});

            return $this->success($response->toArray());
        } catch (Throwable $e) {
            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::SHOW_ERROR);
        }
    }

    #[OA\Put(path: '/{{ camelName }}/update', summary: '更新接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}'])]
    #[OA\RequestBody(required: true, content: new OA\JsonContent(ref: {{ name }}UpsertRequest::class))]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ name }}Response::class))]
    public function update({{ name }}UpsertRequest $updateRequest): JsonResponse
    {
        $request = $updateRequest->validated();
        $id = intval($request->query('id', 0));

        DB::beginTransaction();
        try {
            ${{ camelName }}BundleService = new {{ name }}BundleService;
            ${{ camelName }} = ${{ camelName }}BundleService->getOneById($id);
            if (empty(${{ camelName }})) {
                throw new BusinessException(BusinessEnum::NOT_FOUND);
            }

            $input = new {{ name }}Entity($request);

            ${{ camelName }}BundleService->updateById($input->toArray(), $id);

            DB::commit();

            return $this->success();
        } catch (Throwable $e) {
            DB::rollBack();

            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::UPDATE_ERROR);
        }
    }

    #[OA\Delete(path: '/{{ camelName }}/destroy', summary: '删除接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}'])]
    #[OA\Parameter(name: 'id', description: 'ID', in: 'query', required: true, example: 1)]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ name }}DestroyResponse::class))]
    public function destroy(Request $request): JsonResponse
    {
        $id = intval($request->query('id', 0));

        DB::beginTransaction();
        try {
            ${{ camelName }}BundleService = new {{ name }}BundleService;
            ${{ camelName }} = ${{ camelName }}BundleService->getOneById($id);
            if (empty(${{ camelName }})) {
                throw new BusinessException(BusinessEnum::NOT_FOUND);
            }

            if (${{ camelName }}BundleService->removeById($id)) {
                DB::commit();

                return $this->success();
            }

            throw new BusinessException(BusinessEnum::DESTROY_FAIL);
        } catch (Throwable $e) {
            DB::rollBack();

            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::DESTROY_ERROR);
        }
    }
}

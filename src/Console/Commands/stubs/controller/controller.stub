<?php

declare(strict_types=1);

namespace {{ namespace }}\Controllers;

use App\Bundles\{{ groupName }}\Services\{{ className }}BundleService;
use App\Http\Controllers\Controller;
use {{ baseNamespace }}\Entities\{{ className }}Entity;
use {{ namespace }}\Requests\{{ className }}\{{ className }}QueryRequest;
use {{ namespace }}\Requests\{{ className }}\{{ className }}UpsertRequest;
use {{ namespace }}\Responses\{{ className }}\{{ className }}DestroyResponse;
use {{ namespace }}\Responses\{{ className }}\{{ className }}QueryResponse;
use {{ namespace }}\Responses\{{ className }}\{{ className }}Response;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Juling\Foundation\Enums\BusinessEnum;
use Juling\Foundation\Exceptions\BusinessException;
use OpenApi\Attributes as OA;
use Throwable;

class {{ className }}Controller extends Controller
{
    #[OA\Post(path: '/{{ classCamelName }}/query', summary: '查询{{ comment }}列表接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}模块'])]
    #[OA\Parameter(name: 'page', description: '当前页码', in: 'query', required: true, example: 1)]
    #[OA\Parameter(name: 'pageSize', description: '每页分页数', in: 'query', required: false, example: 10)]
    #[OA\RequestBody(required: true, content: new OA\JsonContent(ref: {{ className }}QueryRequest::class))]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ className }}QueryResponse::class))]
    public function query({{ className }}QueryRequest $queryRequest): JsonResponse
    {
        $requestData = $queryRequest->validated();
        $page = intval($queryRequest->query('page', 1));
        $pageSize = intval($queryRequest->query('pageSize', 10));

        try {
            $condition = [];

            if (isset($requestData['id'])) {
                $condition[] = ['id', '=', intval($requestData['id'])];
            }

            ${{ classCamelName }}BundleService = new {{ className }}BundleService;
            $result = ${{ classCamelName }}BundleService->page($condition, $page, $pageSize);

            foreach ($result['data'] as $key => $item) {
                $response = new {{ className }}Response($item);
                $result['data'][$key] = $response->toArray();
            }

            return $this->success($result);
        } catch (Throwable $e) {
            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::QUERY_ERROR);
        }
    }

    #[OA\Post(path: '/{{ classCamelName }}/store', summary: '新增{{ comment }}接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}模块'])]
    #[OA\RequestBody(required: true, content: new OA\JsonContent(ref: {{ className }}UpsertRequest::class))]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ className }}Response::class))]
    public function store({{ className }}UpsertRequest $createRequest): JsonResponse
    {
        $requestData = $createRequest->validated();

        DB::beginTransaction();
        try {
            $input = new {{ className }}Entity($requestData);

            ${{ classCamelName }}BundleService = new {{ className }}BundleService;
            if (${{ classCamelName }}BundleService->save($input->toArray())) {
                DB::commit();

                return $this->success();
            }

            throw new BusinessException(BusinessEnum::CREATE_FAIL);
        } catch (Throwable $e) {
            DB::rollBack();

            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::CREATE_ERROR);
        }
    }

    #[OA\Get(path: '/{{ classCamelName }}/show', summary: '获取{{ comment }}详情接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}模块'])]
    #[OA\Parameter(name: 'id', description: 'ID', in: 'query', required: true, example: 1)]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ className }}Response::class))]
    public function show(Request $request): JsonResponse
    {
        $id = intval($request->query('id', 0));

        try {
            ${{ classCamelName }}BundleService = new {{ className }}BundleService;
            ${{ classCamelName }} = ${{ classCamelName }}BundleService->getOneById($id);
            if (empty(${{ classCamelName }})) {
                throw new BusinessException(BusinessEnum::NOT_FOUND);
            }

            $response = new {{ className }}Response(${{ classCamelName }});

            return $this->success($response->toArray());
        } catch (Throwable $e) {
            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::SHOW_ERROR);
        }
    }

    #[OA\Put(path: '/{{ classCamelName }}/update', summary: '更新{{ comment }}接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}模块'])]
    #[OA\RequestBody(required: true, content: new OA\JsonContent(ref: {{ className }}UpsertRequest::class))]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ className }}Response::class))]
    public function update({{ className }}UpsertRequest $updateRequest): JsonResponse
    {
        $requestData = $updateRequest->validated();
        $id = intval($updateRequest->query('id', 0));

        DB::beginTransaction();
        try {
            ${{ classCamelName }}BundleService = new {{ className }}BundleService;
            ${{ classCamelName }} = ${{ classCamelName }}BundleService->getOneById($id);
            if (empty(${{ classCamelName }})) {
                throw new BusinessException(BusinessEnum::NOT_FOUND);
            }

            $input = new {{ className }}Entity($requestData);

            ${{ classCamelName }}BundleService->updateById($input->toArray(), $id);

            DB::commit();

            return $this->success();
        } catch (Throwable $e) {
            DB::rollBack();

            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::UPDATE_ERROR);
        }
    }

    #[OA\Delete(path: '/{{ classCamelName }}/destroy', summary: '删除{{ comment }}接口', security: [['bearerAuth' => []]], tags: ['{{ comment }}模块'])]
    #[OA\Parameter(name: 'id', description: 'ID', in: 'query', required: true, example: 1)]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {{ className }}DestroyResponse::class))]
    public function destroy(Request $request): JsonResponse
    {
        $id = intval($request->query('id', 0));

        DB::beginTransaction();
        try {
            ${{ classCamelName }}BundleService = new {{ className }}BundleService;
            ${{ classCamelName }} = ${{ classCamelName }}BundleService->getOneById($id);
            if (empty(${{ classCamelName }})) {
                throw new BusinessException(BusinessEnum::NOT_FOUND);
            }

            if (${{ classCamelName }}BundleService->removeById($id)) {
                DB::commit();

                return $this->success();
            }

            throw new BusinessException(BusinessEnum::DESTROY_FAIL);
        } catch (Throwable $e) {
            DB::rollBack();

            if ($e instanceof BusinessException) {
                return $this->error($e);
            }

            Log::error($e);

            return $this->error(BusinessEnum::DESTROY_ERROR);
        }
    }
}
